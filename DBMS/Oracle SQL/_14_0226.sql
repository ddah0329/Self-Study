-- 시퀀스 사용
-- 시퀀스 생성
CREATE SEQUENCE SEQ_BOOK;
CREATE SEQUENCE SEQ_MEMBER;

-- 시퀀스 사용
SELECT * FROM TBL_MEMBER;
SELECT * FROM TBL_BOOK;

DELETE FROM TBL_BOOK;
DELETE FROM TBL_MEMBER;

CREATE TABLE TBL_MEMBER(
   MEMBER_NUMBER NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_NAME VARCHAR2(500),
   MEMBER_AGE NUMBER,
   MEMBER_PHONE_NUMBER VARCHAR2(500) UNIQUE,
   MEMBER_ADDRESS VARCHAR2(500)
);

CREATE TABLE TBL_BOOK(
   BOOK_NUMBER NUMBER CONSTRAINT PK_BOOK PRIMARY KEY,
   BOOK_NAME VARCHAR2(500),
   BOOK_CATEGORY VARCHAR2(500) CHECK(
      BOOK_CATEGORY IN('인문학','추리','IT','로맨스') 
   ),
   MEMBER_NUMBER NUMBER,
   CONSTRAINT FK_MEMBER FOREIGN KEY(MEMBER_NUMBER) REFERENCES TBL_MEMBER(MEMBER_NUMBER)
);

-- 시퀀스는 테이블에 값을 넣어줄때 사용된다.
INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL , '홍길동', 22, '010-1111-1111','서울시');

INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL , '신짱구', 25, '010-2222-2222', '서울시');

INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL , '김철수', 30, '010-3333-3333', '경기도');

SELECT * FROM TBL_MEMBER;

-- 시퀀스는 테이블에 값을 넣어줄때 사용된다.
INSERT INTO TBL_BOOK
VALUES(SEQ_BOOK.NEXTVAL , 'a책', 'IT', NULL);

INSERT INTO TBL_BOOK
VALUES(SEQ_BOOK.NEXTVAL , 'b책', '추리', NULL);

INSERT INTO TBL_BOOK
VALUES(SEQ_BOOK.NEXTVAL , 'c책', '인문학', NULL);

INSERT INTO TBL_BOOK
VALUES(SEQ_BOOK.NEXTVAL , 'd책', '인문학', NULL);

INSERT INTO TBL_MEMBER
VALUES(SEQ_BOOK.NEXTVAL , '이유리', 28, '010-0000-0000', '경기도');

SELECT * FROM TBL_MEMBER;

-- 시퀀스 삭제: 1부터 증가되는 값을 만들어내는 '기능'만 삭제
DROP SEQUENCE SEQ_BOOK;
DROP SEQUENCE SEQ_MEMBER;


--------------------------------------------------------------
-- 테이블 생성
CREATE TABLE TBL_TEST(
	TEST_NUMBER NUMBER CONSTRAINT PK_TEST PRIMARY KEY
);

-- 시퀀스 시작값을 100으로 설정
CREATE SEQUENCE SEQ_TEST 
	START WITH 100;

INSERT INTO TBL_TEST
VALUES(SEQ_TEST.NEXTVAL);

SELECT * FROM TBL_TEST;

-- 시퀀스 기능 삭제
DROP SEQUENCE SEQ_TEST;

-- 시퀀스 증가값 기능 설정
CREATE SEQUENCE SEQ_TEST
	INCREMENT BY 5;

INSERT INTO TBL_TEST
VALUES(SEQ_TEST.NEXTVAL);

DROP SEQUENCE SEQ_TEST;

DELETE FROM TBL_TEST;


--옵션 동시 설정
CREATE SEQUENCE SEQ_TEST
	START WITH 200
	INCREMENT BY 3;
	

UPDATE TBL_BOOK
SET MEMBER_NUMBER = 1
WHERE BOOK_NAME = '셜록'


DELETE FROM TBL_MEMBER
WHERE MEMBER_NAME = '홍길동';

-- BOOK(자식테이블) 부터 삭제 해야함
DROP TABLE TBL_BOOK;
DROP TABLE TBL_MEMBER;

CREATE TABLE TBL_MEMBER(
   MEMBER_NUMBER NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_NAME VARCHAR2(500),
   MEMBER_AGE NUMBER,
   MEMBER_PHONE_NUMBER VARCHAR2(500) UNIQUE,
   MEMBER_ADDRESS VARCHAR2(500)
);

-- ON DELETE CASCADE 옵션 적용
CREATE TABLE TBL_BOOK(
   BOOK_NUMBER NUMBER CONSTRAINT PK_BOOK PRIMARY KEY,
   BOOK_NAME VARCHAR2(500),
   BOOK_CATEGORY VARCHAR2(500) CHECK(
      BOOK_CATEGORY IN('인문학','추리','IT','로맨스') 
   ),
   MEMBER_NUMBER NUMBER,
   CONSTRAINT FK_MEMBER FOREIGN KEY(MEMBER_NUMBER) REFERENCES TBL_MEMBER(MEMBER_NUMBER)
   ON DELETE CASCADE
);


INSERT INTO TBL_MEMBER
VALUES(1,'홍길동', 20, '010-1234-1234','서울시');

INSERT INTO TBL_BOOK
VALUES(1, '오이대왕', '인문학', 1);

SELECT * FROM TBL_MEMBER;
SELECT * FROM TBL_BOOK;

DELETE FROM TBL_MEMBER
WHERE MEMBER_NAME ='홍길동';


INSERT INTO TBL_BOOK
VALUES(1, 'DBMS 완전 정복', 'IT', NULL);

INSERT INTO TBL_BOOK
VALUES(2, '파이썬 완전 정복', 'IT', NULL);

INSERT INTO TBL_BOOK
VALUES(3, 'JAVA 완전 정복', 'IT', NULL);

SELECT * FROM TBL_BOOK ORDER BY BOOK_NUMBER;

--NVL()
SELECT 
	BOOK_NAME, 
	NVL(MEMBER_NUMBER, 0)
FROM TBL_BOOK;

-- 오류 : MEMBER_NUMBER는 NUMBER타입이라 문자열 X
SELECT 
	BOOK_NAME, 
	NVL(MEMBER_NUMBER, '비어있음')
FROM TBL_BOOK;

INSERT INTO TBL_MEMBER
VALUES(1, '신짱구', 20, '010-0000-0000', '서울시');

UPDATE TBL_BOOK
SET MEMBER_NUMBER = 1
WHERE BOOK_NUMBER = 2;

SELECT * FROM TBL_MEMBER;


-- NVL2() : 여기서 문자열이 왜 가능하다고?
SELECT 
	BOOK_NAME,
	NVL2(MEMBER_NUMBER, '대여중','대여가능')
FROM 
	TBL_BOOK;


SELECT * FROM PLAYER;


-- 롤백 테스트
-- PLAYER 테이블에서 TEAM_ID가 K01인 선수이름을 ㅋㅋ로 변경
UPDATE PLAYER
SET PLAYER_NAME = 'ㅋㅋ'
WHERE TEAM_ID = 'K01';


SELECT * FROM PLAYER ORDER BY TEAM_ID;

ROLLBACK;
COMMIT;
